[project]
name = "dbx_toolkit"
version = "1.0.0"
description = "Toolkit to quickly diagnose and fix Databricks issues."
authors = [
    { name = "Thomas Brouwer", email = "brouwer.thomas@gmail.com" },
]
readme = "README.md"
requires-python = ">=3.11"
dependencies = [
    "jinja2>=3.1.4",
    "pandas-stubs>=2.2.3.241009",
    "pandas>=2.2.3",
    "pyspark==3.5.0",
    "databricks-sdk>=0.38.0",
]

[tool.uv]
package = true
dev-dependencies = [
    "bandit>=1.7.10",
    "coverage>=7.6.5",
    "databricks-dlt>=0.2.1",
    "databricks-sdk>=0.37.0",
    "defusedxml>=0.7.1",
    "genbadge>=1.1.1",
    "git-cliff>=2.6.0",
    "mkdocs-material>=9.5.38",
    "mkdocs>=1.6.1",
    "mypy>=1.13.0",
    "pdoc3>=0.11.1",
    "pre-commit>=3.8.0",
    "pydoclint>=0.5.8",
    "pytest-cov>=5.0.0",
    "pytest-mock>=3.14.0",
    "pytest>=8.3.3",
    "ruff>=0.7.3",
    "sqlfluff>=3.2.5",
]

[project.scripts]
main = "dbx_toolkit.main:main"

[tool.ruff]
src = ["src"]
target-version = "py311"
line-length = 100
extend-include = ["*.ipynb"]
extend-exclude = ["scratch"]

[tool.ruff.lint]
pydocstyle.convention = "numpy"
external = ["DOC"]
select = ["ALL"]
ignore = [
    "ANN101",   # "Missing type annotation for `self`." Deprecated.
    "COM812",   # "Missing trailing comma." Ignored since it conflicts with the formatter.
    "D203",     # "One blank line required before class docstring." Should be disabled by default.
    "D213",     # "Multi-line docstring summary should start at the second line." Should be disabled by default.
    "E501",     # "Line too long." Sometimes my comments are a bit longer.
    "E731",     # "Do not assign a lambda expression, use a def." Needed for spark UDFs.
    "ERA001",   # "Found commented out code." I comment out code sometimes
    "FBT001",   # "Boolean positional arg in function definition." I sometimes use this.
    "FBT002",   # "Boolean default value in function definition." I sometimes use this too.
    "FBT003",   # "Boolean positional value in function call." This is fairly common in spark.
    "ISC001",   # "Implicit string concatenation." Ignored since it conflicts with the formatter.
    "N812",     # "Lowercase `functions` imported as non-lowercase." Pretty standard for spark programming.
    "S101",     # "Use of `assert` detected." Used quite often in tests.
    "T201",     # "`print` found." I use this for debugging.
]
unfixable = [
    "F401",     # "Unused import." Disabled since it makes linting/formatting notebooks messy and impossible.
]

[tool.ruff.lint.per-file-ignores]
"notebooks/**/*.py" = [
    "D100",     # "Missing docstring in public module." Not needed for Databricks notebooks.
    "INP001",   # "Part of an implicit namespace package. Add an `__init__.py`." Not needed for Databricks notebooks.
]
"fixtures/**/*.py" = [
    "D100",     # "Missing docstring in public module." Not needed for Databricks notebooks.
    "INP001",   # "Part of an implicit namespace package. Add an `__init__.py`." Not needed for Databricks notebooks.
]
"tests/*.py" = [
    "PLR2004",  # "Magic value used in comparison, consider replacing with a constant variable." This is fine for tests.
]

[tool.mypy]
python_version = "3.11"
mypy_path = ["src"]
strict = true
disallow_untyped_decorators = false
exclude = "scratch"

[[tool.mypy.overrides]]
module = ["dlt"]
ignore_missing_imports = true

[tool.pytest.ini_options]
testpaths = ["tests"]
pythonpath = ["src"]

[tool.pydoclint]
style = "numpy"
exclude = ".git|.venv|scratch"

[tool.bandit]
targets = ["src"]
skips = [
    "B608",     # Possible SQL injection vector through string-based query construction.
]
exclude_dirs = [".venv", "archive", "scratch", "tests"]

[tool.semantic_release]
version_toml = ["pyproject.toml:project.version"]
major_on_zero = true
branch = "main"
commit_author = "github-actions[bot] <actions@github.com>"
changelog_generate = false

[tool.git-cliff.changelog]
header = """
# Changelog\n
All notable changes to this project will be documented in this file.\n
"""
body = """
{% if version %}\
    ## [{{ version | trim_start_matches(pat="v") }}] - {{ timestamp | date(format="%Y-%m-%d") }}
{% else %}\
    ## [unreleased]
{% endif %}\
{% for group, commits in commits | group_by(attribute="group") %}
    ### {{ group | striptags | trim | upper_first }}
    {% for commit in commits %}
        - {% if commit.scope %}*({{ commit.scope }})* {% endif %}\
            {% if commit.breaking %}[**breaking**] {% endif %}\
            {{ commit.message | upper_first }}\
    {% endfor %}
{% endfor %}\n
"""
trim = true

[tool.git-cliff.git]
conventional_commits = true
filter_unconventional = true
split_commits = false
commit_parsers = [
  { message = "^feat", group = "<!-- 0 -->üöÄ Features" },
  { message = "^fix", group = "<!-- 1 -->üêõ Bug Fixes" },
  { message = "^doc", group = "<!-- 3 -->üìö Documentation" },
  { message = "^perf", group = "<!-- 4 -->‚ö° Performance" },
  { message = "^refactor", group = "<!-- 2 -->üöú Refactor" },
  { message = "^style", group = "<!-- 5 -->üé® Styling" },
  { message = "^test", group = "<!-- 6 -->üß™ Testing" },
  { message = "^chore\\(release\\)", skip = true },
  { message = "^chore\\(deps.*\\)", skip = true },
  { message = "^chore\\(pr\\)", skip = true },
  { message = "^chore\\(pull\\)", skip = true },
  { message = "^chore|^ci", group = "<!-- 7 -->‚öôÔ∏è Miscellaneous Tasks" },
  { body = ".*security", group = "<!-- 8 -->üõ°Ô∏è Security" },
  { message = "^revert", group = "<!-- 9 -->‚óÄÔ∏è Revert" },
  { message = "^build", group = "<!-- 10 -->üèóÔ∏è Build System" },
]
filter_commits = false
topo_order = false
sort_commits = "oldest"

[tool.sqlfluff.core]
dialect = "databricks"
templater = "jinja"
max_line_length = 120
ignore = "parsing"

[tool.sqlfluff.indentation]
indented_joins = false
indented_using_on = true
template_blocks_indent = false

[tool.sqlfluff.rules.capitalisation.keywords]
capitalisation_policy = "upper"

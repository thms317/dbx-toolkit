[project]
name = "dbx_toolkit"
version = "1.0.0"
description = "Toolkit to quickly diagnose and fix Databricks issues."
authors = [
    { name = "Thomas Brouwer", email = "brouwer.thomas@gmail.com" },
]
readme = "README.md"
requires-python = ">=3.11"
dependencies = [
    "jinja2>=3.1.4",
    "pandas-stubs>=2.2.3.241009",
    "pandas>=2.2.3",
]

[tool.uv]
package = true
dev-dependencies = [
    "databricks-connect==15.4.*",
    "databricks-dlt>=0.3.0",
    "databricks-sdk>=0.65.0",
    "mypy>=1.18.2",
    "pip>=25.2",
    "pre-commit>=4.3.0",
    "pydoclint>=0.7.3",
    "pytest-cov>=7.0.0",
    "pytest-mock>=3.15.1",
    "pytest>=8.4.2",
    "ruff>=0.13.1",
]


[tool.ruff]
src = ["src"]
target-version = "py311"
line-length = 100
extend-include = ["*.ipynb"]
extend-exclude = ["scratch"]

[tool.ruff.lint]
pydocstyle.convention = "numpy"
external = ["DOC"]
select = ["ALL"]
ignore = [
    "BLE001",   # "Do not catch blind exception: `Exception`." Sometimes needed in scripts.
    "COM812",   # "Missing trailing comma." Ignored since it conflicts with the formatter.
    "D203",     # "One blank line required before class docstring." Should be disabled by default.
    "D213",     # "Multi-line docstring summary should start at the second line." Should be disabled by default.
    "E501",     # "Line too long." Sometimes my comments are a bit longer.
    "E731",     # "Do not assign a lambda expression, use a def." Needed for spark UDFs.
    "ERA001",   # "Found commented out code." I comment out code sometimes
    "FBT001",   # "Boolean positional arg in function definition." I sometimes use this.
    "FBT002",   # "Boolean default value in function definition." I sometimes use this too.
    "FBT003",   # "Boolean positional value in function call." This is fairly common in spark.
    "ISC001",   # "Implicit string concatenation." Ignored since it conflicts with the formatter.
    "N812",     # "Lowercase `functions` imported as non-lowercase." Pretty standard for spark programming.
    "S101",     # "Use of `assert` detected." Used quite often in tests.
    "T201",     # "`print` found." I use this for debugging.
]
unfixable = [
    "F401",     # "Unused import." Disabled since it makes linting/formatting notebooks messy and impossible.
]

[tool.ruff.lint.per-file-ignores]
"notebooks/**/*.py" = [
    "D100",     # "Missing docstring in public module." Not needed for Databricks notebooks.
    "INP001",   # "Part of an implicit namespace package. Add an `__init__.py`." Not needed for Databricks notebooks.
]
"fixtures/**/*.py" = [
    "D100",     # "Missing docstring in public module." Not needed for Databricks notebooks.
    "INP001",   # "Part of an implicit namespace package. Add an `__init__.py`." Not needed for Databricks notebooks.
]
"tests/*.py" = [
    "PLR2004",  # "Magic value used in comparison, consider replacing with a constant variable." This is fine for tests.
]

[tool.mypy]
python_version = "3.11"
mypy_path = ["src"]
strict = true
disallow_untyped_decorators = false
exclude = "scratch"

[[tool.mypy.overrides]]
module = ["dlt"]
ignore_missing_imports = true

[tool.pytest.ini_options]
testpaths = ["tests"]
pythonpath = ["src"]

[tool.coverage.run]
omit = ["*/__init__.py"]

[tool.pydoclint]
style = "numpy"
exclude = ".git|.venv|scratch"

[tool.commitizen]
name = "cz_conventional_commits"
tag_format = "v$version"
version_scheme = "pep440"
version_provider = "uv"
update_changelog_on_bump = true
